#include <iostream>
#include <cstring>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

#define SMF_IP "192.168.96.231" // SMF IP
#define GTP_PORT 2123  // Standard GTP-C port

int main() {
    int sockfd;
    struct sockaddr_in serverAddr;
    char buffer[1024];

    // Create UDP socket
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        std::cerr << "Socket creation failed" << std::endl;
        return -1;
    }

    // Configure SGW-C address
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(GTP_PORT);
    inet_pton(AF_INET, SMF_IP, &serverAddr.sin_addr);

   // Construct a valid GTPv2-C Create Session Request
   unsigned char gtpMessage[] = {

    0x48, 0x20, 0x00, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x08, 0x00,
    0x22, 0x02, 0x01, 0x12, 0x14, 0x64, 0x14, 0xf8, 0x4c, 0x00, 0x08, 0x00, 0x79, 0x52, 0x95, 0x00,
    0x00, 0x00, 0x00, 0xf0, 0x4b, 0x00, 0x08, 0x00, 0x21, 0x43, 0x05, 0x01, 0x00, 0x00, 0x00, 0xf0,
    0x56, 0x00, 0x0d, 0x00, 0x0c, 0x13, 0x01, 0x84, 0xff, 0xfe, 0x00, 0xff, 0x13, 0x01, 0x84, 0xd8,
    0x0b, 0x53, 0x00, 0x03, 0x00, 0x22, 0xf2, 0x10, 0x52, 0x00, 0x01, 0x00, 0x06, 0x57, 0x00, 0x09,
    0x00, 0x86, 0x00, 0xff, 0x00, 0x01, 0xc0, 0xa8, 0x60, 0xef, 0x47, 0x00, 0x1c, 0x00, 0x08, 0x69,
    0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x06, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, 0x06, 0x6d,
    0x63, 0x63, 0x32, 0x32, 0x32, 0x04, 0x67, 0x70, 0x72, 0x73, 0x80, 0x00, 0x01, 0x00, 0x00, 0x63,
    0x00, 0x01, 0x00, 0x01, 0x4f, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x01,
    0x00, 0x00, 0x48, 0x00, 0x08, 0x00, 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x5d, 0x00,
    0x2c, 0x00, 0x49, 0x00, 0x01, 0x00, 0x05, 0x57, 0x00, 0x09, 0x02, 0x84, 0x00, 0xaf, 0xff, 0x01,
    0xc0, 0xa8, 0x30, 0x3b, 0x50, 0x00, 0x16, 0x00, 0x49, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

unsigned char gtpMessage2[] = {

    // GTPv2 Header (8 bytes)
    0x48, // Flags: Version(2) | P(0) | T(1) | Spare(000) = 01001000
    0x20, // Message Type: Create Session Request (0x20)
    0x00, 0xca, // Message Length: 202 bytes
    0x00, 0x00, 0x00, 0x00, // TEID (Tunnel Endpoint Identifier) = 0 (Sender TEID)

    // Sequence Number & Spare (4 bytes)
    0x00, 0x00, 0x02, // Sequence Number: 2
    0x00, // Spare

    // IMSI (International Mobile Subscriber Identity) IE (8 bytes)
    0x01, // IMSI IE Type (0x01)
    0x00, 0x08, // Length: 8 bytes
    0x00, // Spare
    0x22, 0x02, 0x01, 0x12, 0x14, 0x64, 0x14, 0xf8, // IMSI value (encoded)

    // MSISDN (Mobile Subscriber ISDN Number) IE (8 bytes)
    0x4c, // MSISDN IE Type (0x4c)
    0x00, 0x08, // Length: 8 bytes
    0x00, // Spare
    0x79, 0x52, 0x95, 0x00, 0x00, 0x00, 0x00, 0xf0, // MSISDN value

    // MEI (Mobile Equipment Identity) IE (8 bytes)
    0x4b, // MEI IE Type (0x4b)
    0x00, 0x08, // Length: 8 bytes
    0x00, // Spare
    0x21, 0x43, 0x05, 0x01, 0x00, 0x00, 0x00, 0xf0, // IMEI value

    // Serving Network (3GPP) IE (13 bytes)
    0x56, // Serving Network IE Type (0x56)
    0x00, 0x0d, // Length: 13 bytes
    0x00, 0x0c, // Spare
    0x13, 0x01, 0x84, 0xff, 0xfe, 0x00, 0xff, 0x13, 0x01, 0x84, 0xd8, 0x0b, // MCC/MNC encoded

    // RAT Type (Radio Access Technology) IE (3 bytes)
    0x53, // RAT Type IE Type (0x53)
    0x00, 0x03, // Length: 3 bytes
    0x00, // Spare
    0x22, 0xf2, // RAT Type Value

    // Indication Flags (2 bytes)
    0x10, // Indication IE Type (0x10)
    0x52, 0x00, 0x01, 0x00, 0x06, // Flags (various indicators)

    // F-TEID for Control Plane (9 bytes)
    0x57, // F-TEID IE Type (0x57)
    0x00, 0x09, // Length: 9 bytes
    0x00, // Spare
    0x86, 0x00, 0xff, 0x00, // Interface Type and TEID
    0x01, 0xc0, 0xa8, 0x60, 0xef, // IPv4 Address (192.168.96.239)

    // APN (Access Point Name) IE (28 bytes)
    0x47, // APN IE Type (0x47)
    0x00, 0x1c, // Length: 28 bytes
    0x00, 0x08, // Spare
    0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, // "internet"
    0x06, 0x6d, 0x6e, 0x63, 0x30, 0x30, 0x31, // "mnc001"
    0x06, 0x6d, 0x63, 0x63, 0x32, 0x32, 0x32, // "mcc222"
    0x04, 0x67, 0x70, 0x72, 0x73, // "gprs"

    // Selection Mode (2 bytes)
    0x80, // Selection Mode IE Type (0x80)
    0x00, 0x01, 0x00, 0x00,

    // PDN Type (2 bytes)
    0x63, // PDN Type IE Type (0x63)
    0x00, 0x01, 0x00, 0x01, // IPv4

    // PAA (PDN Address Allocation) IE (5 bytes)
    0x4f, // PAA IE Type (0x4f)
    0x00, 0x05, // Length: 5 bytes
    0x00, // Spare
    0x01, // IPv4 Type
    0x00, 0x00, 0x00, 0x00, // IPv4 Address (0.0.0.0)

    // Recovery (1 byte)
    0x7f, // Recovery IE Type (0x7f)
    0x00, 0x01, 0x00, 0x00,

    // AMBR (Aggregated Maximum Bitrate) IE (8 bytes)
    0x48, // AMBR IE Type (0x48)
    0x00, 0x08, // Length: 8 bytes
    0x00, // Spare
    0x11, 0x11, 0x11, 0x11, // UL-AMBR
    0x22, 0x22, 0x22, 0x22, // DL-AMBR

    // Bearer Contexts (44 bytes)
    0x5d, // Bearer Context IE Type (0x5d)
    0x00, 0x2c, // Length: 44 bytes
    0x00,

    // EBI (EPS Bearer ID) (2 bytes)
    0x49, // EBI IE Type (0x49)
    0x00, 0x01, // Length: 1 byte
    0x00, // Spare
    0x05, // EBI Value

    // F-TEID for Bearer (9 bytes)
    0x57, // F-TEID IE Type (0x57)
    0x00, 0x09, // Length: 9 bytes
    0x02, // Spare
    0x84, 0x00, 0xaf, 0xff, // Interface Type and TEID
    0x01, 0xc0, 0xa8, 0x30, 0x3b, // IPv4 Address (192.168.48.59)

    // Bearer QoS (22 bytes)
    0x50, // Bearer QoS IE Type (0x50)
    0x00, 0x16, // Length: 22 bytes
    0x00,
    0x49, 0xff, 0x00, 0x00, // QCI & ARP
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // MBR & GBR
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // Extra Bytes
};

    // Send GTP message to SGW-C
    ssize_t sentBytes = sendto(sockfd, gtpMessage2, sizeof(gtpMessage2), 0,
                               (struct sockaddr*)&serverAddr, sizeof(serverAddr));
    if (sentBytes < 0) {
        std::cerr << "Failed to send GTP message" << std::endl;
        close(sockfd);
        return -1;
    }

    std::cout << "Create Session Request sent to SMF. Sent bytes: " << sentBytes << std::endl;

    // Receive response from SGW-C
    socklen_t addrLen = sizeof(serverAddr);
    int recvLen = recvfrom(sockfd, buffer, sizeof(buffer), 0, (struct sockaddr*)&serverAddr, &addrLen);
    if (recvLen > 0) {
        std::cout << "Received response from SGW-C" << std::endl;
    } else {
        std::cerr << "Failed to receive response" << std::endl;
    }

    // Close socket
    close(sockfd);
    return 0;
}
